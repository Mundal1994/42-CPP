/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   print_float_limit.cpp                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: molesen <marvin@42.fr>                     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/01/11 16:00:32 by molesen           #+#    #+#             */
/*   Updated: 2023/01/11 16:00:33 by molesen          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "converter.hpp"

static int	decimal_is_zero(char* input, int len)
{
	++len;
	while (input[len] != '\0' && input[len] != 'f')
	{
		if (input[len] != '0')
			return (0);
		++len;
	}
	return (1);
}

static int	within_limit_float(char* input)
{
	int	len;

	len = ft_strlen_stop(input, strlen(input), '.');
	if ((len == 40 && strncmp(input, "-340282346638528859811704183484516925440.", 41) > 0) || \
		(input[0] == '-' && len > 40) || \
		(!strncmp(input, "-340282346638528859811704183484516925440.", 41) \
		&& !decimal_is_zero(input, len)))
	{
		std::cout << "-inff" << std::endl;
		return (0);
	}
	else if ((len == 39 && strncmp(input, "340282346638528859811704183484516925440.", 40) > 0) || \
		(input[0] != '-' && len > 39) || \
		(!strncmp(input, "340282346638528859811704183484516925440.", 40) \
		&& !decimal_is_zero(input, len)))
	{
		std::cout << "+inff" << std::endl;
		return (0);
	}
	std::cout << (float)atof(input) << "f" << std::endl;
	return (1);
}

static int	within_limit_double(char* input)
{
	int	len;

	len = ft_strlen_stop(input, strlen(input), '.');
	if ((len == 310 && strncmp(input, "-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.", 311) > 0) || \
		(input[0] == '-' && len > 310) || \
		(!strncmp(input, "-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.", 311) \
		&& !decimal_is_zero(input, len)))
	{
		std::cout << "-inf" << std::endl;
		return (0);
	}
	else if ((len == 309 && strncmp(input, "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.", 310) > 0) || \
		(input[0] != '-' && len > 309) || \
		(!strncmp(input, "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.", 310) \
		&& !decimal_is_zero(input, len)))
	{
		std::cout << "+inf" << std::endl;
		return (0);
	}
	std::cout << (double)atof(input) << std::endl;
	return (1);
}

void	within_limit(char* input, int f)
{
	if (f == FLOAT)
		within_limit_float(input);
	else
		within_limit_double(input);
}
